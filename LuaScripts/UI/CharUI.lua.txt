---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Saukiya.
--- DateTime: 2020/8/17 0:43
---
---干员界面
---@type UnityEngine.RectTransform
cardPrefab = cardPrefab

--排序方式+筛选方式


--卡牌对象缓存
local CardList = {}

--排序-设置层级-添加监听
function init()
    tog_level.onValueChanged:AddListener(function(boo)
        if boo then
            sortLevel()
            SetSibling()
        end
    end)
    tog_rarity.onValueChanged:AddListener(function(boo)
        if boo then
            sortRarity()
            SetSibling()
        end
    end)
end

--创建卡牌并更新卡牌数据
function updateView()
    local dataList = PlayerManager:Get():GetCharList()
    --双列表最大值循环
    for i = 1, math.max(dataList.Count, #CardList) do
        --如果i在dataList范围内--则设置CardList的数据并激活
        if i < dataList.Count + 1 then
            --如果i在CardList范围外，则创建预制体
            if #CardList < i then
                local charCard = getCharCard(GameObject.Instantiate(cardPrefab, cardPrefab.parent))
                table.insert(CardList, charCard)
            end
            CardList[i]:setData(dataList[i - 1])
            CardList[i].gameObject.name = CardList[i].data:GetCharMeta():GetEnglishName();
            CardList[i]:setActive(true)
        else
            --如果i在dataList范围外，则失活CardList中的GameObject
            CardList[i]:setActive(false)
        end
    end
    --执行排序的方法
    if tog_level.isOn then
        sortLevel()
    else
        sortRarity()
    end
    SetSibling()
end

---根据transform返回一个卡片对象（由于Lua层感觉不好互相沟通 所以受限用这种方法
---@param transform UnityEngine.Transform
function getCharCard(transform)
    transform:DOScaleY(3,0.3)
    local CharCard = {
        data,
        gameObject = transform.gameObject,
        name = transform:Find("txt_name"):GetComponent("Text"),
        level = transform:Find("txt_level"):GetComponent("Text"),
        expPercentage = transform:Find("img_exp_ground/img_exp_percentage"):GetComponent("Image"),
        charCard = transform:Find("img_char_card"):GetComponent("Image"),
        rarity1 = transform:Find("img_rarity_1"):GetComponent("Image"),
        rarity2 = transform:Find("img_rarity_2"):GetComponent("Image"),
        rarity3 = transform:Find("img_rarity_3"):GetComponent("Image"),
        rarity4 = transform:Find("img_rarity_4"):GetComponent("Image"),
        rarityStar = transform:Find("img_rarity_star"):GetComponent("Image"),
        profession = transform:Find("img_profession"):GetComponent("Image"),
        eliteImage = transform:Find("img_elite"):GetComponent("Image")
    }
    --设置data并更新数据
    function CharCard:setData(data)
        self.data = data
        local charMeta = self.data:GetCharMeta()
        local rarity = charMeta:GetRarity()
        self.name.text = charMeta:GetChineseName()
        self.charCard.sprite = charMeta:GetCharImage()
        self.rarity1.sprite = CharManager:GetCardGroundImage(rarity .. "_1")
        self.rarity2.sprite = CharManager:GetCardGroundImage(rarity .. "_2")
        self.rarity3.sprite = CharManager:GetCardGroundImage(rarity .. "_3")
        self.rarity4.sprite = CharManager:GetCardGroundImage(rarity .. "_4")
        self.rarityStar.sprite = CharManager:GetCardGroundImage(rarity .. "_star")
        self.profession.sprite = CharManager:GetProfessionSmallImage(charMeta:GetProfession())
        self:update();
    end

    function CharCard:update()
        self.level.text = self.data:GetLevel()
        self.expPercentage.fillAmount = self.data:GetExp() / self.data:GetMaxExp()
        self.eliteImage.gameObject:SetActive(self.data:GetElite() > 0)
        if self.data:GetElite() > 0 then
            self.eliteImage.sprite = CharManager:GetCharEliteImage("card_" .. self.data:GetElite())
        end
    end

    function CharCard:setActive(boo)
        self.gameObject:SetActive(boo)
    end

    transform:GetComponent("Button").onClick:AddListener(function()
        --打开界面
        local list = {}-- 与C# string[] 对接
        local index
        for i, v in ipairs(CardList) do
            if v.gameObject.activeSelf then
                if v.data == CharCard.data then
                    index = i
                end
                table.insert(list, v.data:GetCharMeta():GetId())
            end
        end
        CharInfoUI.Show(list, index - 1)
    end)
    return CharCard
end

function show()
    self:BaseShow()
    self.canvasGroup.alpha = 0
    self.canvasGroup:DOFade(1, 0.4)
end

function hide(destroy)
    self.canvasGroup:DOFade(0, 0.4):OnComplete(function()
        self:BaseHide(destroy)
    end)
end

function sortLevel()
    --等级排序
    table.sort(CardList, function(a, b)
        if a.gameObject.activeSelf and b.gameObject.activeSelf then
            if a.data:GetElite() == b.data:GetElite() then
                --精英阶级如果相同
                if a.data:GetLevel() == b.data:GetLevel() then
                    --等级如果相同
                    return a.data:GetExp() > b.data:GetExp()--比较经验
                end
                return a.data:GetLevel() > b.data:GetLevel()
            end
            return a.data:GetElite() > b.data:GetElite()
        end
        return a.gameObject.activeSelf and not b.gameObject.activeSelf--激活的gameObject在前，没激活的在后
    end)
end

function sortRarity()
    --稀有度排序
    table.sort(CardList, function(a, b)
        if a.gameObject.activeSelf and b.gameObject.activeSelf then
            if a.data:GetCharMeta():GetRarity() == b.data:GetCharMeta():GetRarity() then
                --如果稀有度相同
                if a.data:GetElite() == b.data:GetElite() then
                    --排序精英、等级、硬件
                    if a.data:GetLevel() == b.data:GetLevel() then
                        return a.data:GetExp() > b.data:GetExp()
                    end
                    return a.data:GetLevel() > b.data:GetLevel()
                end
                return a.data:GetElite() > b.data:GetElite()
            end
            return a.data:GetCharMeta():GetRarity() > b.data:GetCharMeta():GetRarity()--比较经验
        end
        return a.gameObject.activeSelf and not b.gameObject.activeSelf--激活的gameObject在前，没激活的在后
    end)
end

function SetSibling()
    --修改位置
    for i, v in ipairs(CardList) do
        v.gameObject.transform:SetSiblingIndex(i)
    end
end